#include <Servo.h>

// Arduino pin assignment
#define PIN_LED   9   // LED active-low
#define PIN_TRIG  12  // sonar sensor TRIGGER
#define PIN_ECHO  13  // sonar sensor ECHO
#define PIN_SERVO 10  // servo motor

// configurable parameters for sonar
#define SND_VEL 346.0     // sound velocity at 24 celsius degree (m/s)
#define INTERVAL 25       // sampling interval (msec) 
#define PULSE_DURATION 10 // pulse duration (usec)
#define _DIST_MIN 180.0   // minimum distance (mm) 
#define _DIST_MAX 360.0   // maximum distance (mm) 

#define TIMEOUT ((INTERVAL / 2) * 1000.0)
#define SCALE (0.001 * 0.5 * SND_VEL)

#define _EMA_ALPHA 0.2    // EMA weight (0~1)

// Servo PWM range
#define _DUTY_MIN 500     // 0°
#define _DUTY_MAX 2500    // 180°

Servo myservo;

// global variables
float dist_raw, dist_filtered, dist_ema, dist_prev = _DIST_MAX;
unsigned long last_sampling_time = 0;

void setup() {
  pinMode(PIN_LED, OUTPUT);
  pinMode(PIN_TRIG, OUTPUT);
  pinMode(PIN_ECHO, INPUT);
  digitalWrite(PIN_TRIG, LOW);

  myservo.attach(PIN_SERVO);
  myservo.writeMicroseconds(_DUTY_MIN); // 초기 0도 위치

  Serial.begin(57600);
}

void loop() {
  // 샘플링
  if (millis() < last_sampling_time + INTERVAL) return;

  // 거리측정
  dist_raw = USS_measure(PIN_TRIG, PIN_ECHO);

  //필터
  if ((dist_raw == 0.0) || (dist_raw > _DIST_MAX) || (dist_raw < _DIST_MIN)) {
    dist_filtered = dist_prev;  
    digitalWrite(PIN_LED, HIGH); 
  } else {
    dist_filtered = dist_raw;
    dist_prev = dist_raw;
    digitalWrite(PIN_LED, LOW); //LED ON
  }

  dist_ema = _EMA_ALPHA * dist_filtered + (1 - _EMA_ALPHA) * dist_ema;

  float servo_angle;
  if (dist_ema <= _DIST_MIN) {
    servo_angle = 0.0;
  } else if (dist_ema >= _DIST_MAX) {
    servo_angle = 180.0;
  } else {
    servo_angle = (dist_ema - _DIST_MIN) * 180.0 / (_DIST_MAX - _DIST_MIN);
  }

  int duty = map(servo_angle, 0, 180, _DUTY_MIN, _DUTY_MAX);
  myservo.writeMicroseconds(duty);

  Serial.print("Min:");   Serial.print(_DIST_MIN);
  Serial.print(",dist:"); Serial.print(dist_raw);
  Serial.print(",ema:");  Serial.print(dist_ema);
  Serial.print(",Servo:");Serial.print(myservo.read());
  Serial.print(",Max:");  Serial.print(_DIST_MAX);
  Serial.println("");

  last_sampling_time += INTERVAL;
}

float USS_measure(int TRIG, int ECHO)
{
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(PULSE_DURATION);
  digitalWrite(TRIG, LOW);

  return pulseIn(ECHO, HIGH, TIMEOUT) * SCALE; // mm
}
